openapi: 3.0.1
servers:
  - url: http://localhost:3000/v1
    description: Local development server
  - url: https://xrpspec.com/v1
    description: Public development server
info:
  description: XRP Server REST interface.
  version: 0.0.14 # TODO: Load from package.json
  title: XRP Server REST
tags:
  - name: Query
    description: Methods to access data from the ledger.
paths: {}
paths:
  '/servers/info':
    get:
      tags:
        - Query
      summary: Retrieve server info.
      operationId: getServerInfo
      description: Retrieve information about the current status of the XRP Server and the rippled server(s) it is connected to.
      responses:
        '200':
          description: Server info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfo'
  '/apiDocs':
    get:
      tags:
        - Meta
      operationId: getApiDoc
      description: Returns API docs
      responses:
        '200':
          description: API specification document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDoc'
  '/ping':
    get:
      operationId: getPing
      description: 'Returns 200'
      responses:
        '200':
          description: Ping response
components:
  schemas:
    ServerInfo:
      required:
        - server_version
      properties:
        server_version:
          type: string
        rippled_servers:
          type: array
          items:
            $ref: '#/components/schemas/RippledServerInfo'
    RippledServerInfo:
      required:
      - buildVersion
      - completeLedgers
      - hostID
      - ioLatencyMs
      - lastClose
      - loadFactor
      - peers
      - pubkeyNode
      - serverState
      - validatedLedger
      - validationQuorum
      type: object
      properties:
        buildVersion:
          type: string
          description: The version number of the running rippled version.
        completeLedgers:
          pattern: '[0-9,-]+'
          type: string
          description: Range expression indicating the sequence numbers of the ledger versions the local rippled has in its database. It is possible to be a disjoint sequence, e.g. “2500-5000,32570-7695432”.
        fetchPack:
          type: number
        hostID:
          type: string
          description: On an admin request, returns the hostname of the server running the rippled instance; otherwise, returns a unique four letter word.
        ioLatencyMs:
          type: number
          description: Amount of time spent waiting for I/O operations to be performed, in milliseconds. If this number is not very, very low, then the rippled server is probably having serious load issues.
        jqTransOverflow:
          type: string
        load:
          $ref: '#/components/schemas/Load'
        lastClose:
          $ref: '#/components/schemas/LastClose'
        loadFactor:
          type: number
          description: The load factor the server is currently enforcing, as a multiplier on the base transaction fee. The load factor is determined by the highest of the individual server’s load factor, cluster’s load factor, and the overall network’s load factor.
        peerDisconnects:
          type: string
        peerDisconnectsResources:
          type: string
        peers:
          minimum: 0
          type: integer
          description: How many other rippled servers the node is currently connected to.
          format: int32
        pubkeyNode:
          type: string
          description: Public key used to verify this node for internal communications; this key is automatically generated by the server the first time it starts up. (If deleted, the node can just create a new pair of keys.)
        pubkeyValidator:
          type: string
          description: '*(Admin only)* Public key used by this node to sign ledger validations.'
        serverState:
          $ref: '#/components/schemas/ServerState'
        serverStateDurationUs:
          type: string
        stateAccounting:
          type: object
          description: Total duration spent in and every transition to each possible server state.
        time:
          type: string
        uptime:
          type: number
        validatedLedger:
          $ref: '#/components/schemas/ValidatedLedger'
        validationQuorum:
          type: number
          description: Minimum number of trusted validations required in order to validate a ledger version. Some circumstances may cause the server to require more validations.
        validatorList:
          type: object
      additionalProperties: false
    Load:
      title: Load
      required:
      - jobTypes
      - threads
      type: object
      properties:
        jobTypes:
          type: object
          description: '*(Admin only)* Information about the rate of different types of jobs being performed by the server and how much time it spends on each.'
        threads:
          type: number
          description: '*(Admin only)* The number of threads in the server’s main job pool, performing various operations.'
      description: '*(Admin only)* Detailed information about the current load state of the server.'
    LastClose:
      title: LastClose
      required:
      - convergeTimeS
      - proposers
      type: object
      properties:
        convergeTimeS:
          type: number
          description: The time it took to reach a consensus for the last ledger closing, in seconds.
        proposers:
          minimum: 0
          type: integer
          description: Number of trusted validators participating in the ledger closing.
          format: int32
      description: Information about the last time the server closed a ledger.
    ServerState:
      title: ServerState
      enum:
      - disconnected
      - connected
      - syncing
      - tracking
      - full
      - validating
      - proposing
      type: string
      description: A string indicating to what extent the server is participating in the network. See [Possible Server States](https://developers.ripple.com/rippled-server-states.html) for more details.
      example: disconnected
    ValidatedLedger:
      title: ValidatedLedger
      required:
      - age
      - baseFeeXRP
      - hash
      - reserveBaseXRP
      - reserveIncrementXRP
      - ledgerVersion
      type: object
      properties:
        age:
          minimum: 0
          type: integer
          description: The time since the ledger was closed, in seconds.
          format: int32
        baseFeeXRP:
          pattern: ^[0-9]*[.]?[0-9]+([eE][-+]?[0-9]+)?$
          type: string
          description: Base fee, in XRP. This may be represented in scientific notation such as 1e-05 for 0.00005.
        hash:
          pattern: ^[A-F0-9]{64}$
          type: string
          description: Unique hash for the ledger, as an uppercase hexadecimal string.
        reserveBaseXRP:
          pattern: ^[0-9]*[.]?[0-9]+([eE][-+]?[0-9]+)?$
          type: string
          description: Base fee, in XRP. This may be represented in scientific notation such as 1e-05 for 0.00005.
        reserveIncrementXRP:
          pattern: ^[0-9]*[.]?[0-9]+([eE][-+]?[0-9]+)?$
          type: string
          description: Base fee, in XRP. This may be represented in scientific notation such as 1e-05 for 0.00005.
        ledgerVersion:
          minimum: 0
          type: integer
          description: Identifying sequence number of this ledger version.
          format: int32
      description: Information about the fully-validated ledger with the highest sequence number (the most recent).
    ApiDoc:
      description: The requested apiDoc.
      type: object
